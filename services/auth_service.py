import os
import time
import json
import logging
import traceback
import requests
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class AuthService:
    def __init__(self):
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        self.COOKIES_FILE = "pocket_option_cookies.json"
        self.COOKIES_EXPIRY_FILE = "cookies_expiry.json"
        self.LOGIN_URL = "https://pocketoption.com/en/sign-in/"
        self.API_URL = "https://pocketoption.com/api/v2/"
        self.TIMEOUT = 30
        
        # –ü—É—Ç–∏ –∫ Chrome –∏ ChromeDriver
        self.CHROME_PATHS = [
            r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
            r"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
            r"C:\\Users\\Administrator\\Desktop\\chrome-win64\\chrome.exe"
        ]
        
        self.CHROMEDRIVER_PATHS = [
            r"C:\\Users\\Administrator\\Desktop\\chromedriver-win64\\chromedriver.exe",
            r".\\chromedriver.exe",
            r"chromedriver.exe"
        ]
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.driver = None
        self._is_logged_in = False
        self._ssid = None
        self._api_session = requests.Session()

    def _setup_driver(self, headless=False):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            chrome_options = Options()
            if headless:
                chrome_options.add_argument("--headless=new")
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--window-size=1920,1080")
            
            # User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # –ü–æ–∏—Å–∫ Chrome
            chrome_found = False
            for path in self.CHROME_PATHS:
                if os.path.exists(path):
                    chrome_options.binary_location = path
                    chrome_found = True
                    logger.info(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
                    break
            
            if not chrome_found:
                logger.error("‚ùå Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                return False
            
            # –ü–æ–∏—Å–∫ ChromeDriver
            driver_found = False
            service = None
            for path in self.CHROMEDRIVER_PATHS:
                if os.path.exists(path):
                    service = Service(path)
                    driver_found = True
                    logger.info(f"‚úÖ ChromeDriver –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
                    break
            
            if not driver_found:
                logger.error("‚ùå ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.set_page_load_timeout(self.TIMEOUT)
            self.driver.implicitly_wait(10)
            
            logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False

    def _save_cookies(self, cookies):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies –≤ —Ñ–∞–π–ª—ã JSON"""
        try:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è cookies
            filtered_cookies = []
            for cookie in cookies:
                if 'expiry' in cookie:
                    try:
                        int(cookie['expiry'])
                        filtered_cookies.append(cookie)
                    except:
                        continue
                else:
                    filtered_cookies.append(cookie)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies
            with open(self.COOKIES_FILE, 'w', encoding='utf-8') as f:
                json.dump(filtered_cookies, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è (24 —á–∞—Å–∞)
            expiry_time = datetime.now() + timedelta(hours=24)
            with open(self.COOKIES_EXPIRY_FILE, 'w') as f:
                json.dump({"expiry": expiry_time.isoformat()}, f)
            
            logger.info(f"‚úÖ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(filtered_cookies)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ cookies: {e}")
            return False

    def _load_cookies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ cookies –∏–∑ —Ñ–∞–π–ª–æ–≤ JSON"""
        try:
            if not os.path.exists(self.COOKIES_FILE):
                return None
                
            with open(self.COOKIES_FILE, 'r') as f:
                cookies = json.load(f)
            return cookies
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cookies: {e}")
            return None

    def _check_cookies_expiry(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è cookies —á–µ—Ä–µ–∑ —Ñ–∞–π–ª JSON"""
        try:
            if not os.path.exists(self.COOKIES_EXPIRY_FILE):
                return False
                
            with open(self.COOKIES_EXPIRY_FILE, 'r') as f:
                expiry_data = json.load(f)
                expiry_time = datetime.fromisoformat(expiry_data["expiry"])
                return datetime.now() < expiry_time
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ä–æ–∫–∞ cookies: {e}")
            return False

    def start_auth_process(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.driver:
                if not self._setup_driver():
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cookies
            if self._check_cookies_expiry():
                cookies = self._load_cookies()
                if cookies:
                    self.driver.get("https://pocketoption.com")
                    for cookie in cookies:
                        self.driver.add_cookie(cookie)
                    self.driver.refresh()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    try:
                        WebDriverWait(self.driver, 10).until(
                            EC.presence_of_element_located((By.CLASS_NAME, "user-avatar"))
                        )
                        self._is_logged_in = True
                        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —É—Å–ø–µ—à–Ω–∞")
                        return True
                    except:
                        logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
            # –ï—Å–ª–∏ cookies –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –∏—Ö –Ω–µ—Ç - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            self.driver.get(self.LOGIN_URL)
            logger.info("üåê –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def confirm_auth(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self.driver:
                logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, "user-avatar"))
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies
            cookies = self.driver.get_cookies()
            if self._save_cookies(cookies):
                self._is_logged_in = True
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def refresh_cookies(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies"""
        try:
            if not self.is_logged_in():
                return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            temp_driver = self._setup_driver(headless=True)
            if not temp_driver:
                return False
            
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies
                temp_driver.get("https://pocketoption.com")
                for cookie in self.driver.get_cookies():
                    temp_driver.add_cookie(cookie)
                temp_driver.refresh()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                WebDriverWait(temp_driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "user-avatar"))
                )
                
                new_cookies = temp_driver.get_cookies()
                self._save_cookies(new_cookies)
                logger.info("‚úÖ Cookies —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return True
                
            finally:
                temp_driver.quit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies: {e}")
            return False

    def is_logged_in(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return self._is_logged_in

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            self.driver = None
            self._is_logged_in = False

    def _get_ssid_from_cookies(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ SSID –∏–∑ cookies –∏ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ cookies
            cookies = self._load_cookies()
            if not cookies:
                return None
                
            # –ò—â–µ–º SSID –≤ cookies
            for cookie in cookies:
                if cookie.get('name') == 'ssid':
                    return cookie.get('value')
            
            # –ï—Å–ª–∏ –≤ cookies –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API
            if not self.driver:
                logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º SSID –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSID
                ssid = self.driver.execute_script("""
                    return window.localStorage.getItem('ssid') || 
                           window.sessionStorage.getItem('ssid') ||
                           (window.PocketOption && window.PocketOption.ssid);
                """)
                
                if ssid:
                    logger.info("‚úÖ SSID –ø–æ–ª—É—á–µ–Ω –∏–∑ –æ–±—ä–µ–∫—Ç–∞ API")
                    return ssid
                    
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                logs = self.driver.get_log('performance')
                for log in logs:
                    if 'ssid' in str(log):
                        try:
                            message = json.loads(log['message'])
                            if 'params' in message and 'response' in message['params']:
                                response = message['params']['response']
                                if 'headers' in response and 'set-cookie' in response['headers']:
                                    cookies = response['headers']['set-cookie']
                                    for cookie in cookies:
                                        if 'ssid=' in cookie:
                                            ssid = cookie.split('ssid=')[1].split(';')[0]
                                            logger.info("‚úÖ SSID –ø–æ–ª—É—á–µ–Ω –∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                                            return ssid
                        except:
                            continue
                            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSID –∏–∑ API: {e}")
            
            logger.error("‚ùå SSID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ cookies, –Ω–∏ –≤ API")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSID: {e}")
            return None

    def _setup_api_session(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º SSID
            ssid = self._get_ssid_from_cookies()
            if not ssid:
                logger.error("‚ùå SSID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            self._api_session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Cookie': f'ssid={ssid}',
                'X-Requested-With': 'XMLHttpRequest',
                'Origin': 'https://pocketoption.com',
                'Referer': 'https://pocketoption.com/'
            })
            
            self._ssid = ssid
            logger.info("‚úÖ API —Å–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def check_api_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            if not self._ssid:
                if not self._setup_api_session():
                    return False
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = self._api_session.get(f"{self.API_URL}user/balance")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")
            return False

    def refresh_api_session(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API —Å–µ—Å—Å–∏–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º cookies
            if not self.refresh_cookies():
                return False
                
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º API —Å–µ—Å—Å–∏—é
            return self._setup_api_session()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def get_api_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π API —Å–µ—Å—Å–∏–∏"""
        if not self._ssid:
            if not self._setup_api_session():
                return None
        return self._api_session 