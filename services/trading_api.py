import pandas as pd
import numpy as np
import ta
from datetime import datetime, timedelta, timezone
import logging
import json
import random
from typing import Dict, Optional, List, Tuple, Any
import asyncio

# –í–Ω–µ—à–Ω–∏–π –∫–ª–∏–µ–Ω—Ç BinaryOptionsToolsV2 –æ—Ç–∫–ª—é—á—ë–Ω
PocketOptionAsync = None  # type: ignore
from services.pocket_option_auth import PocketOptionAuth
from services.admin_panel import AdminPanel
import os
import time
import io
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from telethon.tl.types import User
import urllib.parse
import re
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import app.database as db
import traceback
from app.utils import async_retry
from telethon.errors import FloodWaitError


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
# -> –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º—É—î–º–æ ADMIN_ID –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è –∞–±–æ –∑ admin_panel, —è–∫—â–æ —î
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x]
ADMIN_ID = ADMIN_IDS[0] if ADMIN_IDS else None


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –≤ bot.py
def get_auth_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""
    builder = InlineKeyboardMarkup()
    builder.add(
        InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è", callback_data="start_login")
    )
    return builder


class TradingAPI:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Pocket Option API.
    –ö–µ—Ä—É—î —Å–µ—Å—ñ—î—é, –±–∞–ª–∞–Ω—Å–æ–º —Ç–∞ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ API.
    """

    def __init__(self):
        self.api: Optional[Any] = None
        self.is_initialized = False
        self.auth = PocketOptionAuth()
        self.critical_notification_sent = False # Anti-spam flag
        self.telethon_client: Optional[Any] = None
        self.admin_panel: Optional[Any] = None # Will be set later
        self.last_login_time: Optional[datetime] = None
        self.affiliate_bot_username = os.getenv(
            "VERIFICATION_BOT_USERNAME", "@AffiliatePocketBot"
        )
        # --- –ö–µ—à –¥–ª—è –ø–∞—Ä ---
        self.pair_cache: Dict[str, Tuple[List[str], datetime]] = {}
        self.cache_expiry = timedelta(minutes=5)
        self._lock = asyncio.Lock()  # –î–æ–¥–∞—î–º–æ –ª–æ–∫
        # --- –ö–µ—à –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó ---
        self.verification_cache: Dict[str, Tuple[str],] = {}
        self.verification_cache_expiry = timedelta(minutes=5)
        # Add a lock for verification to prevent race conditions
        self.verification_lock = asyncio.Lock()

    def set_admin_panel(self, admin_panel: Any):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –æ–±'—î–∫—Ç AdminPanel –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó."""
        self.admin_panel = admin_panel

    async def initialize_session(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é API, –ø—ã—Ç–∞—è—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π SSID –∏–∑ —Ñ–∞–π–ª–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∏–Ω–∞—á–µ False.
        """
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó API...")
        if PocketOptionAsync is None:
            logger.warning("BinaryOptionsToolsV2 –≤—ñ–¥–∫–ª—é—á–µ–Ω: –∑–æ–≤–Ω—ñ—à–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
            self.is_initialized = False
            return False
        ssid = await self.auth.get_active_ssid()
        if ssid:
            try:
                # self.api = PocketOptionAsync(ssid)  # disabled
                self.is_initialized = False
                logger.warning("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ API –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–º–æ–¥—É–ª—å –≤—ñ–¥–∫–ª—é—á–µ–Ω)")
                return False
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ API –∑ —ñ—Å–Ω—É—é—á–∏–º SSID: {e}", exc_info=True)
                self.is_initialized = False
                return False
        else:
            logger.warning("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
            self.is_initialized = False
            return False

    def set_telethon_client(self, client: Any):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–ª—ñ—î–Ω—Ç Telethon –ø—ñ—Å–ª—è –π–æ–≥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó."""
        self.telethon_client = client

    async def _connect_to_api(self, ssid: str) -> bool:
        try:
            if self.is_initialized:
                return True
            
            logger.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PocketOption API...")
            if PocketOptionAsync is None:
                logger.warning("BinaryOptionsToolsV2 –≤—ñ–¥–∫–ª—é—á–µ–Ω: –∑–æ–≤–Ω—ñ—à–Ω—ñ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
                return False
            # self.api = PocketOptionAsync(ssid)  # disabled
            await asyncio.sleep(1)

            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥czas –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API: {e}", exc_info=True)
            return False

    async def _ensure_initialized(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é API."""
        if not self.is_initialized:
            raise ConnectionError(
                "API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è."
            )

    @async_retry(max_retries=3, delay=2, allowed_exceptions=(ConnectionError, asyncio.TimeoutError))
    async def get_candles(
        self, asset: str, timeframe: int = 60, count: int = 100
    ) -> Optional[pd.DataFrame]:
        try:
            await self._ensure_initialized()
            offset = timeframe * count
            candles = await self.api.get_candles(asset, timeframe, offset)  # type: ignore
            if not candles:
                logger.warning(f"–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Å–≤—ñ—á–∫–∏ –¥–ª—è {asset}")
                return None
            df = pd.DataFrame(candles)
            df["time"] = pd.to_datetime(df["time"])
            return df
        except ConnectionError as e:
            logger.error(str(e))
            self.is_initialized = False # Mark as disconnected on connection error
            raise # Re-raise to be caught by retry decorator
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–≤—ñ—á–æ–∫: {e}", exc_info=True)
            return None

    def calculate_indicators(self, df: pd.DataFrame) -> Optional[pd.DataFrame]:
        try:
            df["rsi"] = ta.momentum.RSIIndicator(df["close"]).rsi()
            macd = ta.trend.MACD(df["close"])
            df["macd"] = macd.macd()
            df["macd_signal"] = macd.macd_signal()
            bollinger = ta.volatility.BollingerBands(df["close"])
            df["bb_high"] = bollinger.bollinger_hband()
            df["bb_low"] = bollinger.bollinger_lband()
            return df
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {e}", exc_info=True)
            return None

    async def get_signals(self) -> List[Dict]:
        try:
            await self._ensure_initialized()
            signals = []
            assets = ["EUR/USD", "GBP/USD", "USD/JPY"]
            for asset in assets:
                try:
                    df_candles = await self.get_candles(asset, 60, 100)
                    if df_candles is not None and not df_candles.empty:
                        signal = self._analyze_candles(
                            df_candles.to_dict("records"), asset
                        )
                        if signal:
                            signals.append(signal)
                except Exception as e:
                    logging.error(
                        f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥czas –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –¥–ª—è {asset}: {e}"
                    )
            return signals
        except ConnectionError as e:
            logger.error(str(e))
            return []
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤: {e}")
            return []

    def _analyze_candles(self, candles: List[Dict], asset: str) -> Optional[Dict]:
        try:
            if len(candles) < 2:
                return None
            last_candle = candles[-1]
            prev_candle = candles[-2]
            trend = "UP" if last_candle["close"] > prev_candle["close"] else "DOWN"
            price_change = abs(last_candle["close"] - prev_candle["close"])
            avg_price = (last_candle["close"] + prev_candle["close"]) / 2
            strength = (price_change / avg_price) * 100
            return {
                "asset": asset,
                "signal": trend,
                "strength": round(strength, 2),
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "confidence": min(round(strength * 2, 2), 100),
                "current_price": round(last_candle["close"], 4),
                "price_change": round(price_change, 4),
                "volume": last_candle.get("volume", 0),
            }
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É —Å–≤—ñ—á–æ–∫: {e}")
            return None

    def start_auth_process(self):
        self.auth.start_browser_and_save_cookies()
        return True

    async def confirm_auth(self) -> bool:
        try:
            if not self.auth:
                logger.error("Auth –º–æ–¥—É–ª—å –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
                return False
            if not self.auth.is_logged_in():
                logger.error(
                    "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —É–≤—ñ–π—à–æ–≤ –¥–æ —Å–∏—Å—Ç–µ–º–∏."
                )
                return False

            ssid = self.auth.get_ssid_from_cookies()
            if not ssid:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ SSID –∑ cookies –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
                return False

            logger.info(
                f"–û—Ç—Ä–∏–º–∞–Ω–æ SSID –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: '{ssid[:30]}...' (–¥–æ–≤–∂–∏–Ω–∞: {len(ssid)})"
            )
            return await self._connect_to_api(ssid)
        except Exception as e:
            logger.error(
                f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥czas –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}", exc_info=True
            )
            return False

    @async_retry(max_retries=3, delay=2, allowed_exceptions=(ConnectionError, asyncio.TimeoutError))
    async def get_balance(self) -> Optional[float]:
        try:
            if not self.is_initialized or not self.api:
                raise ConnectionError("API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
            balance = await self.api.balance()
            return balance
        except ConnectionError as e:
            logger.error(str(e))
            self.is_initialized = False # Mark as disconnected
            raise # Re-raise to be caught by retry decorator
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
            return None

    async def get_open_trades(self) -> List[Dict]:
        try:
            await self._ensure_initialized()
            # Placeholder for actual implementation
            return []
        except ConnectionError as e:
            logger.error(str(e))
            return []
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —É–≥–æ–¥: {e}")
            return []

    def get_market_status(self) -> Optional[Dict]:
        try:
            # Placeholder for actual implementation
            return {"status": "open", "next_open": "N/A", "next_close": "N/A"}
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–∏–Ω–∫—É: {e}")
            return None

    def _get_artificial_volatility(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å."""
        return random.choice(["–ù–∏–∑—å–∫–∞", "–°–µ—Ä–µ–¥–Ω—è", "–í–∏—Å–æ–∫–∞"])

    def _get_artificial_sentiment(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —Ä–∏–Ω–∫—É."""
        return random.choice(["–ë–∏—á–∞—á–∏–π", "–í–µ–¥–º–µ–∂–∏–π", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"])

    def _get_random_signal_data(self, pair: str, expiration_time: int) -> dict:
        """–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ, –∞–ª–µ –ø—Ä–∞–≤–¥–æ–ø–æ–¥—ñ–±–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å–∏–≥–Ω–∞–ª—É –≤ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."""
        direction = random.choice(["call", "put"])
        now = datetime.now()
        close_time = now + timedelta(minutes=expiration_time)

        return {
            "error": None,
            "direction": direction,
            "price": round(random.uniform(1.05, 1.25), 5),
            "close_time": int(close_time.timestamp()),
            "forecast_percentage": round(random.uniform(-0.5, 0.5), 2),
            
            # Market Overview
            "volatility": self._get_artificial_volatility(),
            "sentiment": random.choice(["–ë–∏—á–∞—á–∏–π", "–í–µ–¥–º–µ–∂–∏–π", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", "–ó–º—ñ—à–∞–Ω–∏–π"]),
            "volume": f"{random.randint(100, 1000)}M",
            
            # Market Snapshot
            "support": round(random.uniform(1.01, 1.04), 5),
            "resistance": round(random.uniform(1.26, 1.30), 5),
            
            # TradingView Rating
            "tv_summary": random.choice(['–ù–ï–ô–¢–†–ê–õ–¨–ù–û', '–ü–†–û–î–ê–í–ê–¢–ò', '–ö–£–ü–£–í–ê–¢–ò']),
            "tv_moving_averages": random.choice(['–ü–†–û–î–ê–í–ê–¢–ò', '–ö–£–ü–£–í–ê–¢–ò']),
            "tv_oscillators": random.choice(['–ù–ï–ô–¢–†–ê–õ–¨–ù–û', '–ü–†–û–î–ê–í–ê–¢–ò', '–ö–£–ü–£–í–ê–¢–ò']),

            # Technical Analysis
            "rsi": f"{random.choice(['–†—ñ–≤–Ω–∞ –ª—ñ–Ω—ñ—è', '–ö–æ–ª–∏–≤–∞–Ω–Ω—è', '–†—ñ–∑–∫–∏–π —Ä—É—Ö'])} ({round(random.uniform(30, 70), 2)})",
            "macd": "–ü–µ—Ä–µ—Ç–∏–Ω –ª—ñ–Ω—ñ—ó —Å–∏–≥–Ω–∞–ª—É",
            "bollinger_bands": "–ö–æ–ª–∏–≤–∞–Ω–Ω—è –±—ñ–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó –ª—ñ–Ω—ñ—ó",
            "pattern": "–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–ª–∏–Ω—É"
        }

    async def generate_signal(self, market_type: str, asset: str, timeframe: int) -> Dict:
        """
        –ì–µ–Ω–µ—Ä—É—î —Ç–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –∞–∫—Ç–∏–≤—É —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É.
        –ù–∞—Ä–∞–∑—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó.
        """
        return self._get_random_signal_data(asset, timeframe)

    @async_retry(max_retries=2, delay=5, allowed_exceptions=(Exception,))
    async def check_cookies_expiry_and_notify(self, bot=None):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó cookie —ñ —Å–ø–æ–≤—ñ—â–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        is_valid, _ = self.auth.check_cookies_validity_sync()
        if not is_valid:
            logger.warning("Cookies —Å–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á–∞—Ç—å—Å—è –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω—ñ.")
            if bot and ADMIN_ID:
                try:
                    await bot.send_message(
                        ADMIN_ID,
                        f"üî¥ <b>–£–≤–∞–≥–∞!</b>\n–°—Ç–∞–Ω —Å–µ—Å—ñ—ó PocketOption: <b>–ù–µ–¥—ñ–π—Å–Ω–∞</b>\n"
                        "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ–µ–≤.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É",
                                        callback_data="admin_auth",
                                    )
                                ]
                            ]
                        ),
                    )
                except Exception as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}"
                    )

    @async_retry(max_retries=2, delay=3, allowed_exceptions=(asyncio.TimeoutError, ConnectionError))
    async def is_api_connection_alive(self) -> bool:
        """
        Performs a live check to see if the API connection is truly active
        by fetching the balance. Returns False if the API is not initialized
        or if the balance check fails.
        """
        if not self.is_initialized or not self.api:
                return False
        try:
            # A lightweight check to confirm the connection is active
            balance = await asyncio.wait_for(self.api.balance(), timeout=10.0)
            return balance is not None
        except (asyncio.TimeoutError, ConnectionError) as e:
            logger.warning(f"API connection check failed: {e}")
            self.is_initialized = False # Mark as disconnected
            raise e # Reraise to be caught by the retry decorator
        except Exception as e:
            logger.error(f"An unexpected error occurred during API connection check: {e}")
            self.is_initialized = False # Mark as disconnected
            return False

    async def _reconnect(self):
        """–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API."""
        logger.info("–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API...")
        await self.initialize_session()

    @async_retry(max_retries=3, delay=5, allowed_exceptions=(Exception,))
    async def _send_verification_request(self, uid: str, force_refresh: bool = False) -> Optional[str]:
        """
        Asynchronously sends a UID for verification to the affiliate bot and retrieves the response.

        Uses a short-lived cache to avoid duplicate requests and a lock to prevent races.
        Adds tolerance for Telegram server/client time skew to avoid missing valid replies.
        """
        now = datetime.now()

        # Check cache first
        if not force_refresh and uid in self.verification_cache:
            response_text, timestamp = self.verification_cache[uid]
            if now - timestamp < self.verification_cache_expiry:
                logger.info(f"–ü–æ–≤–µ—Ä—Ç–∞—é –∫–µ—à–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è UID: {uid}")
                return response_text

        # Use a lock to prevent race conditions for new UIDs
        async with self.verification_lock:
            # Double-check cache inside the lock
            if not force_refresh and uid in self.verification_cache:
                response_text, timestamp = self.verification_cache[uid]
                if now - timestamp < self.verification_cache_expiry:
                    logger.info(f"–ü–æ–≤–µ—Ä—Ç–∞—é –∫–µ—à–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ø—ñ—Å–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è) –¥–ª—è UID: {uid}")
                    return response_text

            # Perform the request
            try:
                if not self.telethon_client:
                    logger.error("Telethon client –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
                    return None

                logger.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –¥–ª—è UID: {uid}")

                # Send the UID to the verification bot
                sent_at = datetime.now(timezone.utc)
                sent_msg = await self.telethon_client.send_message(self.affiliate_bot_username, uid)
                sent_id = getattr(sent_msg, 'id', None)

                # Wait for response, polling the chat
                try:
                    timeout_env = os.getenv("AFFILIATE_RESPONSE_TIMEOUT_SECS", "30")
                    timeout_secs = max(5, int(timeout_env))
                except Exception:
                    timeout_secs = 30

                try:
                    skew_env = os.getenv("AFFILIATE_TIME_SKEW_TOLERANCE_SECS", "10")
                    skew_secs = max(0, int(skew_env))
                except Exception:
                    skew_secs = 10

                poll_interval = 1
                deadline = datetime.now() + timedelta(seconds=timeout_secs)
                response_text: Optional[str] = None
                fallback_text: Optional[str] = None

                while datetime.now() < deadline:
                    # Fetch a slightly larger window to avoid missing replies
                    messages = await self.telethon_client.get_messages(self.affiliate_bot_username, limit=25)
                    for msg in messages:
                        # Only incoming replies
                        if bool(getattr(msg, 'out', False)):
                            continue

                        text = (getattr(msg, 'text', '') or '')
                        msg_dt = getattr(msg, 'date', None)

                        # Accept messages newer than (sent_at - skew)
                        if msg_dt:
                            if msg_dt.tzinfo is None:
                                msg_dt_cmp = msg_dt.replace(tzinfo=timezone.utc)
                            else:
                                msg_dt_cmp = msg_dt.astimezone(timezone.utc)
                            if msg_dt_cmp < sent_at - timedelta(seconds=skew_secs):
                                continue

                        # Handle affiliate bot rate-limit responses gracefully
                        if re.search(r"too\s+many\s+requests|slow\s+down|rate\s*limit", text, re.IGNORECASE):
                            backoff_min = 5
                            backoff_max = 10
                            # simple deterministic jitter per-uid in 5..10s
                            sleep_for = backoff_min if backoff_min == backoff_max else (backoff_min + (hash(uid) % (backoff_max - backoff_min + 1)))
                            logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {sleep_for}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                            await asyncio.sleep(sleep_for)
                            # Perform one retry with force_refresh to avoid cache issues
                            return await self._send_verification_request(uid, force_refresh=True)

                        # 1) Prefer replies that reference our sent message
                        reply_to_id = getattr(msg, 'reply_to_msg_id', None)
                        if sent_id is not None and reply_to_id == sent_id:
                            response_text = text
                            break

                        # 2) Then prefer texts that contain the UID
                        if uid and uid in text:
                            response_text = text
                            break

                        # 3) Otherwise remember the first acceptable incoming message as fallback
                        if not fallback_text:
                            fallback_text = text

                    if response_text:
                        break

                    await asyncio.sleep(poll_interval)

                # If no strong match found, use fallback if present
                if not response_text and fallback_text:
                    logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback-–≤—ñ–¥–ø–æ–≤—ñ–¥—å (–±–µ–∑ UID/–±–µ–∑ reply_to), –∞–ª–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –≤—ñ–∫–Ω—ñ —á–∞—Å—É")
                    response_text = fallback_text

                if response_text:
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è UID {uid}: '{response_text}'")
                    self.verification_cache[uid] = (response_text, now)
                    return response_text
                else:
                    logger.warning(f"–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±–æ—Ç–∞ –¥–ª—è UID: {uid} –∑–∞ {timeout_secs}—Å")
                    # Best-effort fallback: reuse cached value if present (even if expired)
                    cached = self.verification_cache.get(uid)
                    if cached:
                        cached_text, _ = cached
                        logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è UID {uid} –ø—ñ—Å–ª—è —Ç–∞–π–º–∞—É—Ç—É")
                        return cached_text
                    return None

            except FloodWaitError as e:
                wait_seconds = max(5, int(getattr(e, 'seconds', 5)))
                logger.warning(f"FloodWaitError: –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è {wait_seconds}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                await asyncio.sleep(wait_seconds)
                return await self._send_verification_request(uid, force_refresh=True)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥czas –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Telethon: {e}", exc_info=True)
                # Re-raise for retry
                raise

    async def _parse_verification_response(self, response_text: str) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —Å–ª–æ–≤–Ω–∏–∫.
        –¶–µ–π –ø–∞—Ä—Å–µ—Ä —Å—Ç—ñ–π–∫–∏–π –¥–æ –≤–∞—Ä—ñ–∞—Ü—ñ–π —É –ø—Ä–æ–±—ñ–ª–∞—Ö, —Ä–µ–≥—ñ—Å—Ç—Ä–∞—Ö —Ç–∞ —Å–∏–º–≤–æ–ª–∞—Ö-—Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞—Ö.
        """
        data = {}
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å (–≤–∏–¥–∞–ª–µ–Ω–Ω—è $, %, —ñ –ø—Ä–æ–±—ñ–ª—ñ–≤, –∫—Ä—ñ–º –¥–µ—Å—è—Ç–∫–æ–≤–æ—ó –∫—Ä–∞–ø–∫–∏)
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –º–∏–Ω—É—Å (–Ω–∞ —Å–ª—É—á–∞–π –≤–æ–∑–≤—Ä–∞—Ç–æ–≤/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        cleanup_pattern = re.compile(r'[^0-9.\-]+')
        nbsp = '\u00A0'
        # –ê–ª–∏–∞—Å—ã –∫–ª—é—á–µ–π (EN/UA/RU) -> –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞
        key_aliases = {
            'uid': {'uid', 'user_id', 'id', '–∞–π–¥–∏', '—ñ–¥'},
            'balance': {'balance', '–±–∞–ª–∞–Ω—Å'},
            'ftd_amount': {'ftd_amount', 'ftd', 'ftd_sum', 'first_deposit', '–ø–µ—Ä–≤—ã–π_–¥–µ–ø–æ–∑–∏—Ç', '–ø–µ—Ä—à–∏–π_–¥–µ–ø–æ–∑–∏—Ç'},
            'sum_of_deposits': {'sum_of_deposits', 'total_deposits', 'deposits_sum', '—Å—É–º–º–∞_–¥–µ–ø–æ–∑–∏—Ç–æ–≤', '—Å—É–º–∞_–¥–µ–ø–æ–∑–∏—Ç—ñ–≤', '–æ–±—â–∞—è_—Å—É–º–º–∞_–¥–µ–ø–æ–∑–∏—Ç–æ–≤'},
            'sum_of_bonuses': {'sum_of_bonuses', 'bonuses', '—Å—É–º–º–∞_–±–æ–Ω—É—Å–æ–≤', '—Å—É–º–∞_–±–æ–Ω—É—Å—ñ–≤'},
            'commission': {'commission', '–∫–æ–º–∏—Å—Å–∏—è', '–∫–æ–º—ñ—Å—ñ—è'},
        }
        # –û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –∞–ª–∏–∞—Å–æ–≤
        alias_to_canonical = {}
        for canon, aliases in key_aliases.items():
            for a in aliases:
                alias_to_canonical[a] = canon
         
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—è–¥–∫–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞ '--------------------------'
        if '--------------------------' in response_text:
            response_text = response_text.split('--------------------------')[0]

        lines = response_text.strip().split('\n')

        for line in lines:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ regex –¥–ª—è –≥–Ω—É—á–∫–æ–≥–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è
            # –î–æ–∑–≤–æ–ª—è—î —Ä—ñ–∑–Ω—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ (:, -, ‚Äì) —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ –Ω–∏—Ö.
            match = re.match(r'^(.*?)\s*[:\-‚Äì]\s*(.*)$', line)
            if not match:
                continue

            key, value = match.groups()
            key = key.strip().lower().replace(" ", "_")
            value = value.strip()
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –ø–æ –∞–ª–∏–∞—Å–∞–º, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            canonical_key = alias_to_canonical.get(key, key)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—é—á—ñ –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è
            if not key or not value:
                continue
            
            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
            numeric_keys = {"balance", "ftd_amount", "sum_of_deposits", "sum_of_bonuses", "commission"}
            if canonical_key in numeric_keys:
                try:
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –∑–∞–ø—è—Ç–æ–π: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è –∏ –Ω–µ—Ç —Ç–æ—á–∫–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º ',' –¥–µ—Å—è—Ç–∏—á–Ω–æ–π
                    raw = value.replace(' ', '').replace(nbsp, '')
                    if ',' in raw and '.' not in raw:
                        raw = raw.replace(',', '.')
                    # –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—ã/—Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –º–∏–Ω—É—Å
                    cleaned_value = cleanup_pattern.sub('', raw)
                    data[canonical_key] = float(cleaned_value) if cleaned_value else 0.0
                except (ValueError, TypeError):
                    data[canonical_key] = 0.0 # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0, —è–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
            else:
                data[canonical_key] = value

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–Ω—É—á–∫–∏–π –ø–æ—à—É–∫ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω—å.
        not_found_patterns = [
            r'user\s+with\s+this\s+id\s+not\s+found',
            r'user\s+not\s+found',
            r'no\s+such\s+user',
            r'–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\s+–Ω–µ\s+–∑–Ω–∞–π–¥–µ–Ω–æ',
            r'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª[—å—è]\s+–Ω–µ\s+–Ω–∞–π–¥–µ–Ω'
        ]
        if any(re.search(p, response_text, re.IGNORECASE) for p in not_found_patterns):
            data['is_found'] = False
            # –Ø–≤–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
            data.pop('uid', None)
            data.pop('balance', None)
            data.pop('ftd_amount', None)
            data.pop('sum_of_deposits', None)
            data.pop('sum_of_bonuses', None)
        else:
            # –í–≤–∞–∂–∞—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π, —è–∫—â–æ —î UID –∞–±–æ —ñ–Ω—à—ñ –¥–∞–Ω—ñ
            data['is_found'] = 'uid' in data or len(data) > 0
            
        return data

    async def check_registration(self, user_id: str, uid: str) -> Tuple[bool, Dict[str, Any]]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.
        –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂: (is_registered, parsed_data).
        """
        # --- –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UID –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
        try:
            import os
            secret_uid = os.getenv("SECRET_UID")
        except Exception:
            secret_uid = None
        if secret_uid and uid == secret_uid:
            logger.info(f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–ª—è UID {uid} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∑–∞ SECRET_UID.")
            db.set_user_registered(user_id, True)
            return True, {'is_found': True, 'uid': uid}
        
        logger.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –¥–ª—è UID: {uid}")
        response_text = await self._send_verification_request(uid, force_refresh=False)
        
        if response_text is None:
            return False, {"error": "communication_error", "is_registered": False}
        
        parsed_data = await self._parse_verification_response(response_text)
        is_registered = parsed_data.get('is_found', False)
        
        # Update registration status in our local DB
        db.set_user_registered(user_id, is_registered)
        
        return is_registered, parsed_data
        
    async def check_deposit(self, user_id: int, uid: str, min_deposit: float) -> Tuple[bool, Dict[str, Any]]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –¥–µ–ø–æ–∑–∏—Ç.
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–∞–∂–∞—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ—é, —è–∫—â–æ 'FTD amount' –∞–±–æ 'Sum of deposits'
        –ø–µ—Ä–µ–≤–∏—â—É—î –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ–π —Å—É–º—ñ –¥–µ–ø–æ–∑–∏—Ç—É.
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ —Ç–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ.
        """
        # --- –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UID –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
        try:
            import os
            secret_uid = os.getenv("SECRET_UID")
        except Exception:
            secret_uid = None
        if secret_uid and uid == secret_uid:
            logger.info(f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è UID {uid} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∑–∞ SECRET_UID.")
            db.set_user_deposited(user_id, True)
            return True, {'sum_of_deposits': min_deposit, 'ftd_amount': min_deposit}
         
        try:
            # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –∫–µ—à
            response_text = await self._send_verification_request(uid, force_refresh=True)
            if not response_text:
                logger.warning(f"–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç—É UID: {uid}")
                return False, {"error": "communication_error"}

            parsed_data = await self._parse_verification_response(response_text)
            
            if not parsed_data.get('is_found', False):
                logger.warning(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç—É –Ω–µ –≤–¥–∞–ª–∞—Å—è: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ UID {uid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return False, parsed_data

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º–∏ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 0.0, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
            ftd_amount = parsed_data.get('ftd_amount', 0.0)
            sum_of_deposits = parsed_data.get('sum_of_deposits', 0.0)

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ ¬±10 –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
            deposit_window = 10.0
            min_threshold = max(0, min_deposit - deposit_window)
            max_threshold = min_deposit + deposit_window

            logger.info(
                f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç—É –¥–ª—è UID {uid}: "
                f"Required: ${min_deposit} (–æ–∫–Ω–æ: ${min_threshold:.2f} - ${max_threshold:.2f}), "
                f"FTD: ${ftd_amount}, Sum of Deposits: ${sum_of_deposits}"
            )

            # –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–µ—Ä—à–∏–π –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
            # –î–µ–ø–æ–∑–∏—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –µ—Å–ª–∏ –æ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min_deposit-10, min_deposit+10]
            has_sufficient_deposit = (
                (min_threshold <= ftd_amount <= max_threshold) or 
                (min_threshold <= sum_of_deposits <= max_threshold)
            )

            if has_sufficient_deposit:
                logger.info(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç –¥–ª—è UID {uid} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞ ¬±{deposit_window}).")
            else:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è UID {uid} (–≤–Ω–µ –æ–∫–Ω–∞ ¬±{deposit_window}).")

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–µ–ø–æ–∑–∏—Ç–∞
            try:
                db.set_user_deposited(user_id, has_sufficient_deposit)
            except Exception:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç—É —É –ë–î.")

            return has_sufficient_deposit, parsed_data

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç—É –¥–ª—è UID {uid}: {e}", exc_info=True)
            return False, {"error": str(e)}

    async def get_last_login_time(self) -> Optional[datetime]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É."""
        return self.last_login_time

    async def get_available_pairs(self, market_type: str) -> List[str]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ä –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Ç–∏–ø—É —Ä–∏–Ω–∫—É (CURRENCY, STOCKS, OTC).
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à—É–≤–∞–Ω–Ω—è.
        """
        if not self.api:
            logger.error("API –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä.")
            return []

        async with self._lock:
            if market_type in self.pair_cache:
                cached_pairs, cache_time = self.pair_cache[market_type]
                if datetime.now() - cache_time < self.cache_expiry:
                    logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω—ñ –ø–∞—Ä–∏ –¥–ª—è '{market_type}'.")
                    return cached_pairs

        logger.info(f"–û–Ω–æ–≤–ª—é—é —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è '{market_type}' –∑ API...")
        try:
            payout_data = await self.api.payout()
            
            market_assets = []
            if payout_data and isinstance(payout_data, dict):
                all_assets = payout_data
                
                # Heuristic to identify currency pairs (e.g., 'EURUSD').
                # Assumes 6 characters and all letters. May include some crypto.
                def is_currency_pair(asset_name: str) -> bool:
                    # A more robust check for currency pairs like 'EUR/USD' or 'EURUSD'
                    # It should contain a slash or be 6 characters long and all alpha.
                    # It should not contain '_otc'.
                    cleaned_asset = asset_name.replace('_otc', '').upper()
                    if '/' in cleaned_asset:
                        parts = cleaned_asset.split('/')
                        return len(parts) == 2 and len(parts[0]) == 3 and len(parts[1]) == 3 and parts[0].isalpha() and parts[1].isalpha()
                    return len(cleaned_asset) == 6 and cleaned_asset.isalpha()

                for asset, payout in all_assets.items():
                    # Check if payout is a valid positive integer.
                    # Assets with 0 or negative payout are considered closed.
                    if not isinstance(payout, int) or payout <= 0:
                        continue

                    is_otc = "_otc" in asset.lower()
                    clean_asset = asset.replace('_otc', '').upper()

                    # Handle market types
                    if market_type == "OTC":
                        if is_otc:
                            # Format currency pairs correctly
                            if len(clean_asset) == 6 and clean_asset.isalpha():
                                market_assets.append(f"{clean_asset[:3]}/{clean_asset[3:]} OTC")
                            else:
                                market_assets.append(f"{clean_asset} OTC")
                    elif market_type == "CURRENCY":
                        if not is_otc and is_currency_pair(asset):
                            if '/' not in clean_asset:
                                market_assets.append(f"{clean_asset[:3]}/{clean_asset[3:]}")
                            else:
                                market_assets.append(clean_asset)
                    elif market_type == "STOCKS":
                        # Catches everything else that is not OTC and not a currency pair.
                        if not is_otc and not is_currency_pair(asset):
                            market_assets.append(clean_asset)

            if not market_assets:
                logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ä –¥–ª—è '{market_type}'.")
                # Cache empty result to avoid frequent API calls for empty markets
                async with self._lock:
                    self.pair_cache[market_type] = ([], datetime.now())
                return []

            async with self._lock:
                self.pair_cache[market_type] = (market_assets, datetime.now())
            
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(market_assets)} –ø–∞—Ä –¥–ª—è '{market_type}'.")
            return market_assets

        except Exception as e:
            logger.error(
                f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ø–∞—Ä –¥–ª—è '{market_type}': {e}",
                exc_info=True
            )
            return []

    async def is_session_valid(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É cookies.
        """
        is_valid, _ = self.auth.check_cookies_validity_sync()
        return is_valid

    async def perform_manual_login_start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä)."""
        await self.auth.manual_login_start()

    async def perform_manual_login_confirm(self) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä—É—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç API."""
        if await self.auth.manual_login_confirm():
            logger.info("–†—É—á–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó...")
            return await self.initialize_session()
        else:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä—É—á–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é.")
            return False