from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
import logging
import asyncio

from app.dispatcher import trading_api
from app.fsm import Authorization
from app.keyboards import get_auth_confirmation_keyboard

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "start_user_auth")
async def handle_start_user_auth(callback: CallbackQuery, state: FSMContext):
    """
    Handles the 'start_user_auth' button for regular users.
    """
    await callback.message.edit_text(
        "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ, —Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=None
    )
    
    # This runs the browser opening in the background
    asyncio.create_task(trading_api.perform_manual_login_start())
    
    await asyncio.sleep(5) # Give some time for the browser to initialize

    await callback.message.edit_text(
        "ü§ñ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –≤—Ö—ñ–¥ –≤ –∞–∫–∞—É–Ω—Ç —É –≤—ñ–∫–Ω—ñ –±—Ä–∞—É–∑–µ—Ä–∞, —è–∫–µ –≤—ñ–¥–∫—Ä–∏–ª–æ—Å—è.\n\n–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É —Ç–∞ –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=get_auth_confirmation_keyboard() # This keyboard should contain 'confirm_auth'
    )
    await state.set_state(Authorization.waiting_for_confirmation)

@router.callback_query(F.data == "confirm_auth", StateFilter(Authorization.waiting_for_confirmation))
async def handle_confirm_auth(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    Handles the confirmation from the user that they have logged in.
    """
    await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—é —Å–µ—Å—ñ—é...", reply_markup=None)
    
    # This runs the confirmation logic
    success = await trading_api.perform_manual_login_confirm()
    
    if success:
        trading_api.critical_notification_sent = False # Reset anti-spam flag
        balance = await trading_api.get_balance()
        balance_text = f"${balance:.2f}" if balance is not None else "–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏"
        await callback.message.edit_text(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –°–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance_text}</b>",
            parse_mode="HTML"
        )
        await state.clear()
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:\n\n1. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç.\n2. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É (F5) —É –±—Ä–∞—É–∑–µ—Ä—ñ.\n3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —â–µ —Ä–∞–∑.",
            reply_markup=get_auth_confirmation_keyboard()
    )
    await callback.answer()