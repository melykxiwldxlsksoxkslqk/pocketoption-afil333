import asyncio
import logging
from datetime import datetime, timedelta
# Avoid circular imports: import dispatcher objects lazily inside functions where needed
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import logging
from services.boost_service import update_all_boosts, check_and_notify_active_boosts
from services.statistics_service import stats_service

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

logger = logging.getLogger(__name__)

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
SESSION_CHECK_INTERVAL_OK = 1800  # 30 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
SESSION_CHECK_INTERVAL_ERROR = 3600  # 1 —á–∞—Å, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–º–µ—Ä–ª–∞ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
PROACTIVE_REFRESH_THRESHOLD_HOURS = 12  # –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å

async def periodic_auth_check(bot, trading_api, admin_panel, interval_seconds: int = 3600):
    """
    Periodically checks the API connection status and warns the admin if the session
    is invalid, expired, or expiring soon. Runs once per hour.
    """
    await asyncio.sleep(20) # Initial delay to allow the bot to start up
    logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å—Ç–∞—Ç—É—Å—É —Å–µ—Å—ñ—ó.")

    while True:
        try:
            admin_id = admin_panel.get_admin_id()
            if not admin_id:
                await asyncio.sleep(interval_seconds)
                continue

            # Check 1: Is connection dead or session expired? (Critical)
            if not await trading_api.is_api_connection_alive():
                # Anti-spam check: only send if a notification hasn't been sent already.
                if not trading_api.critical_notification_sent:
                    logger.warning("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —â–æ —Å–µ—Å—ñ—è API –Ω–µ–¥—ñ–π—Å–Ω–∞. –ù–∞–¥—Å–∏–ª–∞—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
                    auth_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîë –û–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é", callback_data="start_manual_auth")]
                    ])
                    await bot.send_message(
                        admin_id,
                        "üî¥ <b>–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É!</b>\n\n–°–µ—Å—ñ—è API –Ω–µ–¥—ñ–π—Å–Ω–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.",
                        reply_markup=auth_keyboard,
                        parse_mode="HTML"
                    )
                    trading_api.critical_notification_sent = True # Set flag after sending
            else:
                # If the connection is alive, reset the flag so it can notify again if it fails later.
                if trading_api.critical_notification_sent:
                    logger.info("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ API –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –°–∫–∏–¥–∞—é –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
                    trading_api.critical_notification_sent = False
                
                # Check 2: Is session expiring soon? (Warning)
                expiry_warning = trading_api.auth.get_expiry_warning(days_threshold=3)
                if expiry_warning:
                    logger.info(f"–°–µ—Å—ñ—è —Å–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è: {expiry_warning}")
                    auth_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîë –û–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é", callback_data="start_manual_auth")]
                    ])
                    await bot.send_message(
                        admin_id,
                        f"üü° <b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Å–µ—Å—ñ—ó —Å–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è</b>\n\n{expiry_warning} –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–±–æ—ó–≤ —É —Ä–æ–±–æ—Ç—ñ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —ó—ó.",
                        reply_markup=auth_keyboard,
                        parse_mode="HTML"
                    )
                else:
                    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Å—ñ—ó: –≤—Å–µ –≥–∞—Ä–∞–∑–¥, –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ.")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó: {e}", exc_info=True)
            
        await asyncio.sleep(interval_seconds)


async def main():
    scheduler = AsyncIOScheduler()
    from app.dispatcher import bot
    scheduler.add_job(update_all_boosts, 'interval', minutes = 30, args=[bot])
    scheduler.start()
    print("Scheduler started...")
    while True:
        await asyncio.sleep(1)


async def update_statistics_periodically():
    """Periodically updates the statistics for dummy accounts."""
    while True:
        await stats_service.update_balances()
        await asyncio.sleep(10) # Check every 10 seconds

async def boost_notification_scheduler():
    """Periodically checks and notifies users about their active boost balance."""
    logging.info("üöÄ Boost notification scheduler started.")
    while True:
        try:
            from app.dispatcher import bot
            await check_and_notify_active_boosts(bot)
        except Exception as e:
            logging.error(f"Error in boost_notification_scheduler: {e}", exc_info=True)
        await asyncio.sleep(1600) # Check every 1600 seconds to hit exact per-user hour marks

async def setup_background_tasks(dp):
    logging.info("Starting background tasks...")
    asyncio.create_task(main())
    asyncio.create_task(update_statistics_periodically())
    asyncio.create_task(boost_notification_scheduler())